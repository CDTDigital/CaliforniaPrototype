node {

    String BRANCH_PLATFORM = ""

    stage ('Checkout') {
        // Checkout code for specific branch
        checkout scm
    }

    stage ('Build') {
        // Add configuration to project
        sh "cp ~/CaliforniaPrototype/server/config.json ./src/server"

        // Build Docker Container
        sh "docker build -t ca-prototype-main-repository ./src/server"
    }

    stage ('Publish') {
        // Log into AWS ECR
        sh '''#!/bin/bash
            $(aws ecr get-login --region us-west-1)
        '''

        // Publish image to ECR Registry
        docker.withRegistry('https://485490441211.dkr.ecr.us-west-1.amazonaws.com/ca-prototype-main-repository', 'ecr:us-west-1:californiaprototype-credentials') {
            docker.image('ca-prototype-main-repository').push('v_${BUILD_NUMBER}')
            docker.image('ca-prototype-main-repository').push('latest')
        }
    }

    stage ('Deploy to Staging') {
        // Create New Task Definition and Create/Update ECS Service
        sh '''#!/bin/bash

            # Constants
            REGION=us-west-1
            REPOSITORY_NAME=ca-prototype-main-repository
            CLUSTER=ca-prototype-staging-cluster
            FAMILY=ca-prototype-task-definition
            NAME=ca-prototype-task-container-name
            SERVICE_NAME=ca-prototype-emergency-alerts-service

            # Store the repository URI as a variable
            REPOSITORY_URI=`aws ecr describe-repositories --repository-names ${REPOSITORY_NAME} --region ${REGION} | jq .repositories[].repositoryUri | tr -d '"'`
            echo $REPOSITORY_URI

            # Replace the build number and respository URI placeholders with the constants above
            sed -e "s;%BUILD_NUMBER%;${BUILD_NUMBER};g" -e "s;%REPOSITORY_URI%;${REPOSITORY_URI};g" src/jenkins/config/taskdef.json > ${NAME}-v_${BUILD_NUMBER}.json

            # Register the task definition in the repository
            aws ecs register-task-definition --family ${FAMILY} --cli-input-json file://${NAME}-v_${BUILD_NUMBER}.json --region ${REGION}

            # Check if a service currently exists for the cluster
            SERVICES=`aws ecs describe-services --services ${SERVICE_NAME} --cluster ${CLUSTER} --region ${REGION} | jq .failures[]`

            # Get latest task definition revision
            REVISION=`aws ecs describe-task-definition --task-definition ${FAMILY} --region ${REGION} | jq .taskDefinition.revision`

            # Create or update service
            if [ "$SERVICES" == "" ]; then
                echo "Service already exists..."

                # Check the current desired task count
                DESIRED_COUNT=`aws ecs describe-services --services ${SERVICE_NAME} --cluster ${CLUSTER} --region ${REGION} | jq .services[].desiredCount`

                # If desired count is 0, then increment it to 1
                if [ ${DESIRED_COUNT} = "0" ]; then
                  DESIRED_COUNT="1"
                fi

                # Update existing service
                aws ecs update-service --cluster ${CLUSTER} --region ${REGION} --service ${SERVICE_NAME} --task-definition ${FAMILY}:${REVISION} --desired-count ${DESIRED_COUNT}
            else
                echo "Creating a new service..."

                # Create new service
                aws ecs create-service --service-name ${SERVICE_NAME} --desired-count 1 --task-definition ${FAMILY} --cluster ${CLUSTER} --region ${REGION}
            fi
        '''
    }

    stage ('Test') {
        // Execute Test Scripts...
    }

    stage ('Deploy to Production') {
        // Create/Update service to Production
    }
}
